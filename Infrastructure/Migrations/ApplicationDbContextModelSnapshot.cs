// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Paciente", b =>
                {
                    b.Property<int>("Nhc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NHC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Nhc"));

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("APELLIDO1");

                    b.Property<string>("Apellido2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("APELLIDO2");

                    b.Property<string>("Cip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CIP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("DNI");

                    b.Property<int>("Edad")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("EDAD")
                        .HasComputedColumnSql("(datediff(year,[FECHA_NACIMIENTO],getdate())-case when datepart(month,getdate())<datepart(month,[FECHA_NACIMIENTO]) OR datepart(month,getdate())=datepart(month,[FECHA_NACIMIENTO]) AND datepart(day,getdate())<datepart(day,[FECHA_NACIMIENTO]) then (1) else (0) end)", false);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_NACIMIENTO");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OBSERVACIONES");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SEXO")
                        .IsFixedLength();

                    b.HasKey("Nhc")
                        .HasName("PK__Paciente__C7DEDB1337829F7B");

                    b.HasIndex(new[] { "Dni" }, "UQ__Paciente__C035B8DD999F0568")
                        .IsUnique();

                    b.ToTable("Paciente", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Paciente");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Models.PacienteEntity", b =>
                {
                    b.HasBaseType("Core.Entities.Paciente");

                    b.HasDiscriminator().HasValue("PacienteEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
